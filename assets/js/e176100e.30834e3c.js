"use strict";(self.webpackChunkdlt_logs=self.webpackChunkdlt_logs||[]).push([[685],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=u(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||c[m]||l;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=p;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(7294),o=t(4334),l="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,i),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(3117),o=t(7294),l=t(4334),i=t(2389),a=t(7392),s=t(7094),u=t(2466),d="tabList__CuJ",c="tabItem_LNqP";function p(e){var n,t,i=e.lazy,p=e.block,m=e.defaultValue,f=e.values,b=e.groupId,v=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=f?f:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,a.l)(h,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===m?m:null!=(n=null!=m?m:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:g[0].props.value;if(null!==w&&!h.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,s.U)(),T=k.tabGroupChoices,P=k.setTabGroupChoices,O=(0,o.useState)(w),N=O[0],x=O[1],E=[],I=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var S=T[b];null!=S&&S!==N&&h.some((function(e){return e.value===S}))&&x(S)}var D=function(e){var n=e.currentTarget,t=E.indexOf(n),r=h[t].value;r!==N&&(I(n),x(r),null!=b&&P(b,String(r)))},C=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,o=E.indexOf(e.currentTarget)+1;t=null!=(r=E[o])?r:E[0];break;case"ArrowLeft":var l,i=E.indexOf(e.currentTarget)-1;t=null!=(l=E[i])?l:E[E.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},v)},h.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:function(e){return E.push(e)},onKeyDown:C,onFocus:D,onClick:D},i,{className:(0,l.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),i?(0,o.cloneElement)(g.filter((function(e){return e.props.value===N}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function m(e){var n=(0,i.Z)();return o.createElement(p,(0,r.Z)({key:String(n)},e))}},3579:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return m}});var r=t(3117),o=t(102),l=(t(7294),t(3905)),i=t(5488),a=t(5162),s=["components"],u={id:"nonVerbosePlugin",title:"Non-verbose plugin",sidebar_label:"Plugin Non-verbose mode"},d=void 0,c={unversionedId:"nonVerbosePlugin",id:"nonVerbosePlugin",title:"Non-verbose plugin",description:"DLT-Logs extension version >= 1.20.0 come with a built-in DLT non-verbose decoder plugin.",source:"@site/docs/nonVerbosePlugin.md",sourceDirName:".",slug:"/nonVerbosePlugin",permalink:"/dlt-logs/docs/nonVerbosePlugin",draft:!1,editUrl:"https://github.com/mbehr1/dlt-logs/edit/master/docs/dlt-logs/docs/nonVerbosePlugin.md",tags:[],version:"current",frontMatter:{id:"nonVerbosePlugin",title:"Non-verbose plugin",sidebar_label:"Plugin Non-verbose mode"},sidebar:"dltLogsSideBar",previous:{title:"Plugin SOME/IP decoder",permalink:"/dlt-logs/docs/someIpPlugin"},next:{title:"Plugin Rewrite",permalink:"/dlt-logs/docs/rewritePlugin"}},p={},m=[{value:"Example",id:"example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Treeview",id:"treeview",level:2},{value:"Supported &quot;non-verbose&quot; messages",id:"supported-non-verbose-messages",level:2},{value:"Limitations",id:"limitations",level:2}],f={toc:m};function b(e){var n=e.components,t=(0,o.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"DLT-Logs extension version >= 1.20.0 come with a built-in DLT non-verbose decoder plugin."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"Non verbose mode logs are typically presented as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"APID CTID      [...id...] <readable text if any> | <binary hex dump>\n")),(0,l.kt)("p",null,'using a FIBEX file that contains the info how to decode log "id" this can be converted into a regular readable log.'),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"You have to configure the Non-verbose plugin. To configure the plugin call"),(0,l.kt)(i.Z,{groupId:"operating-systems",defaultValue:"win",values:[{label:"Windows",value:"win"},{label:"macOS",value:"mac"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"win",mdxType:"TabItem"},'Use F1 or Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".'),(0,l.kt)(a.Z,{value:"mac",mdxType:"TabItem"},'Use \u21e7\u2318P and enter/select command "Preferences: Open Settings (JSON)".'),(0,l.kt)(a.Z,{value:"linux",mdxType:"TabItem"},'Use Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsonc"},'"dlt-logs.plugins": [\n        {\n            "name": "SomeIp", // config for SOME/IP plugin...\n            ...\n        },\n        {\n            "name":"NonVerbose",\n            "enabled": true, // you can set it to false to disable the plugin\n            "fibexDir": "/home/...", // or "c:\\\\...". Set it to the folder containing your FIBEX files. If you use the SOME/IP plugin as well you can use a shared dir and set it only at the SOME/IP plugin.\n        }\n    ],\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"fibexDir")," needs to point to a folder containing the FIBEX files with extension .xml.\nPlease keep the files uncompressed (no .zip, no .tgz) there.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You can keep multiple files in the folder. They will be sorted in descending order alphabetically first before loading. So if you have multiple files e.g. with a SW revision as part of the file name the one with the latest SW revision will be loaded first. This is important as on loading further files only new services/methods will be added. So the files loaded first determine the version used.\nAnyhow please dont keep files from older versions as opening and parsing them takes CPU time!")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If you changed the content of the folder for now you do need to open a new file or use ",(0,l.kt)("inlineCode",{parentName:"p"},"Developer: Reload window")," to reload the window incl. the extension host.")),(0,l.kt)("h2",{id:"treeview"},"Treeview"),(0,l.kt)("p",null,"In the tree-view you'll find more information about the loaded frames and pdus under"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Plugins\n|- Non-Verbose\n   |- Frames (<number of frames with non-verbose info>/<number of frames in total from the fibex files loaded>)\n      | - <list of all loaded frames with id, apid, ctid, byte-length, message-type, message-info>\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The tooltip of each frame contains more info e.g. PDUs.")),(0,l.kt)("p",null,"(todo add picture)"),(0,l.kt)("h2",{id:"supported-non-verbose-messages"},'Supported "non-verbose" messages'),(0,l.kt)("p",null,'The plugin decodes all "non-verbose", non control-request messages for which is finds a corresponding frame in any FIBEX file.\nIf the message has no APID and no CTID it\'s set with the info from the FIBEX.\nThe log-level is set as well with info from the FIBEX.'),(0,l.kt)("h2",{id:"limitations"},"Limitations"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The plugin is not applied on exporting DLT logs. Only on viewing."),(0,l.kt)("li",{parentName:"ul"},"Endianess should be supported but I tested only little-endianess."),(0,l.kt)("li",{parentName:"ul"},"Currently not supported are:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"FLOAT16")))))}b.isMDXComponent=!0}}]);