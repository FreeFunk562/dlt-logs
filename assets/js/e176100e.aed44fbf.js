"use strict";(self.webpackChunkdlt_logs=self.webpackChunkdlt_logs||[]).push([[685],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(t),f=o,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(7294),o=t(6010),a={tabItem:"tabItem_Ymn6"};function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,l),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return k}});var r=t(7462),o=t(7294),a=t(6010),l=t(2466),i=t(6550),u=t(1980),s=t(7392),c=t(12);function d(e){return function(e){var n,t;return null!=(n=null==(t=o.Children.map(e,(function(e){if(!e||(0,o.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,o.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,s.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function f(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,a=(0,i.k6)(),l=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,u._X)(l),(0,o.useCallback)((function(e){if(l){var n=new URLSearchParams(a.location.search);n.set(l,e),a.replace(Object.assign({},a.location,{search:n.toString()}))}}),[l,a])]}function b(e){var n,t,r,a,l=e.defaultValue,i=e.queryString,u=void 0!==i&&i,s=e.groupId,d=p(e),b=(0,o.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var o=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:l,tabValues:d})})),v=b[0],g=b[1],h=m({queryString:u,groupId:s}),y=h[0],w=h[1],k=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),t=(0,c.Nk)(n),r=t[0],a=t[1],[r,(0,o.useCallback)((function(e){n&&a.set(e)}),[n,a])]),T=k[0],P=k[1],E=function(){var e=null!=y?y:T;return f({value:e,tabValues:d})?e:null}();return(0,o.useLayoutEffect)((function(){E&&g(E)}),[E]),{selectedValue:v,selectValue:(0,o.useCallback)((function(e){if(!f({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);g(e),w(e),P(e)}),[w,P,d]),tabValues:d}}var v=t(2389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){var n=e.className,t=e.block,i=e.selectedValue,u=e.selectValue,s=e.tabValues,c=[],d=(0,l.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=c.indexOf(n),r=s[t].value;r!==i&&(d(n),u(r))},f=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var r,o=c.indexOf(e.currentTarget)+1;t=null!=(r=c[o])?r:c[0];break;case"ArrowLeft":var a,l=c.indexOf(e.currentTarget)-1;t=null!=(a=c[l])?a:c[c.length-1]}null==(n=t)||n.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n)},s.map((function(e){var n=e.value,t=e.label,l=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:function(e){return c.push(e)},onKeyDown:f,onClick:p},l,{className:(0,a.Z)("tabs__item",g.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===n})}),null!=t?t:n)})))}function y(e){var n=e.lazy,t=e.children,r=e.selectedValue,a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var l=a.find((function(e){return e.props.value===r}));return l?(0,o.cloneElement)(l,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function w(e){var n=b(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",g.tabList)},o.createElement(h,(0,r.Z)({},e,n)),o.createElement(y,(0,r.Z)({},e,n)))}function k(e){var n=(0,v.Z)();return o.createElement(w,(0,r.Z)({key:String(n)},e))}},3579:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return f}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=t(4866),i=t(5162),u=["components"],s={id:"nonVerbosePlugin",title:"Non-verbose plugin",sidebar_label:"Plugin Non-verbose mode"},c=void 0,d={unversionedId:"nonVerbosePlugin",id:"nonVerbosePlugin",title:"Non-verbose plugin",description:"DLT-Logs extension version >= 1.20.0 come with a built-in DLT non-verbose decoder plugin.",source:"@site/docs/nonVerbosePlugin.md",sourceDirName:".",slug:"/nonVerbosePlugin",permalink:"/dlt-logs/docs/nonVerbosePlugin",draft:!1,editUrl:"https://github.com/mbehr1/dlt-logs/edit/master/docs/dlt-logs/docs/nonVerbosePlugin.md",tags:[],version:"current",frontMatter:{id:"nonVerbosePlugin",title:"Non-verbose plugin",sidebar_label:"Plugin Non-verbose mode"},sidebar:"dltLogsSideBar",previous:{title:"Plugin CAN decoder",permalink:"/dlt-logs/docs/canPlugin"},next:{title:"Plugin Rewrite",permalink:"/dlt-logs/docs/rewritePlugin"}},p={},f=[{value:"Example",id:"example",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Treeview",id:"treeview",level:2},{value:"Supported &quot;non-verbose&quot; messages",id:"supported-non-verbose-messages",level:2},{value:"Limitations",id:"limitations",level:2}],m={toc:f},b="wrapper";function v(e){var n=e.components,t=(0,o.Z)(e,u);return(0,a.kt)(b,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"DLT-Logs extension version >= 1.20.0 come with a built-in DLT non-verbose decoder plugin."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Non verbose mode logs are typically presented as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"APID CTID      [...id...] <readable text if any> | <binary hex dump>\n")),(0,a.kt)("p",null,'using a FIBEX file that contains the info how to decode log "id" this can be converted into a regular readable log.'),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"You have to configure the Non-verbose plugin. To configure the plugin call"),(0,a.kt)(l.Z,{groupId:"operating-systems",defaultValue:"win",values:[{label:"Windows",value:"win"},{label:"macOS",value:"mac"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"win",mdxType:"TabItem"},'Use F1 or Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".'),(0,a.kt)(i.Z,{value:"mac",mdxType:"TabItem"},'Use \u21e7\u2318P and enter/select command "Preferences: Open Settings (JSON)".'),(0,a.kt)(i.Z,{value:"linux",mdxType:"TabItem"},'Use Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc"},'"dlt-logs.plugins": [\n        {\n            "name": "SomeIp", // config for SOME/IP plugin...\n            ...\n        },\n        {\n            "name":"NonVerbose",\n            "enabled": true, // you can set it to false to disable the plugin\n            "fibexDir": "/home/...", // or "c:\\\\...". Set it to the folder containing your FIBEX files. If you use the SOME/IP plugin as well you can use a shared dir and set it only at the SOME/IP plugin.\n        }\n    ],\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"fibexDir")," needs to point to a folder containing the FIBEX files with extension .xml.\nPlease keep the files uncompressed (no .zip, no .tgz) there.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You can keep multiple files in the folder. They will be sorted in descending order alphabetically first before loading. So if you have multiple files e.g. with a SW revision as part of the file name the one with the latest SW revision will be loaded first. This is important as on loading further files only new services/methods will be added. So the files loaded first determine the version used.\nAnyhow please dont keep files from older versions as opening and parsing them takes CPU time!")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you changed the content of the folder for now you do need to open a new file or use ",(0,a.kt)("inlineCode",{parentName:"p"},"Developer: Reload window")," to reload the window incl. the extension host.")),(0,a.kt)("h2",{id:"treeview"},"Treeview"),(0,a.kt)("p",null,"In the tree-view you'll find more information about the loaded frames and pdus under"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Plugins\n|- Non-Verbose\n   |- Frames (<number of frames with non-verbose info>/<number of frames in total from the fibex files loaded>)\n      | - <list of all loaded frames with id, apid, ctid, byte-length, message-type, message-info>\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The tooltip of each frame contains more info e.g. PDUs.")),(0,a.kt)("p",null,"(todo add picture)"),(0,a.kt)("h2",{id:"supported-non-verbose-messages"},'Supported "non-verbose" messages'),(0,a.kt)("p",null,'The plugin decodes all "non-verbose", non control-request messages for which is finds a corresponding frame in any FIBEX file.\nIf the message has no APID and no CTID it\'s set with the info from the FIBEX.\nThe log-level is set as well with info from the FIBEX.'),(0,a.kt)("h2",{id:"limitations"},"Limitations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The plugin is not applied on exporting DLT logs. Only on viewing."),(0,a.kt)("li",{parentName:"ul"},"Endianess should be supported but I tested only little-endianess."),(0,a.kt)("li",{parentName:"ul"},"Currently not supported are:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"FLOAT16")))))}v.isMDXComponent=!0}}]);