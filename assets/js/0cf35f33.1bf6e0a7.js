"use strict";(self.webpackChunkdlt_logs=self.webpackChunkdlt_logs||[]).push([[533],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(n),p=r,f=c["".concat(u,".").concat(p)]||c[p]||m[p]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7294),r=n(6010),i={tabItem:"tabItem_Ymn6"};function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),u=n(1980),s=n(7392),d=n(12);function c(e){return function(e){var t,n;return null!=(t=null==(n=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function p(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,o.k6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,u._X)(l),(0,r.useCallback)((function(e){if(l){var t=new URLSearchParams(i.location.search);t.set(l,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[l,i])]}function g(e){var t,n,a,i,l=e.defaultValue,o=e.queryString,u=void 0!==o&&o,s=e.groupId,c=m(e),g=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:l,tabValues:c})})),h=g[0],b=g[1],v=f({queryString:u,groupId:s}),N=v[0],k=v[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,d.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),C=y[0],w=y[1],T=function(){var e=null!=N?N:C;return p({value:e,tabValues:c})?e:null}();return(0,r.useLayoutEffect)((function(){T&&b(T)}),[T]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);b(e),k(e),w(e)}),[k,w,c]),tabValues:c}}var h=n(2389),b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var t=e.className,n=e.block,o=e.selectedValue,u=e.selectValue,s=e.tabValues,d=[],c=(0,l.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==o&&(c(t),u(a))},p=function(e){var t,n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,r=d.indexOf(e.currentTarget)+1;n=null!=(a=d[r])?a:d[0];break;case"ArrowLeft":var i,l=d.indexOf(e.currentTarget)-1;n=null!=(i=d[l])?i:d[d.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return d.push(e)},onKeyDown:p,onClick:m},l,{className:(0,i.Z)("tabs__item",b.tabItem,null==l?void 0:l.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function N(e){var t=e.lazy,n=e.children,a=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var l=i.find((function(e){return e.props.value===a}));return l?(0,r.cloneElement)(l,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function k(e){var t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function y(e){var t=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},8157:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(4866),o=n(5162),u=["components"],s={id:"canPlugin",title:"CAN decoder plugin",sidebar_label:"Plugin CAN decoder"},d=void 0,c={unversionedId:"canPlugin",id:"canPlugin",title:"CAN decoder plugin",description:"DLT-Logs extension version >= 1.50.0 come with a built-in CAN decoder plugin based on configurable fibex files and the possibility to open CAN file in .asc format directly.",source:"@site/docs/canPlugin.md",sourceDirName:".",slug:"/canPlugin",permalink:"/dlt-logs/docs/canPlugin",draft:!1,editUrl:"https://github.com/mbehr1/dlt-logs/edit/master/docs/dlt-logs/docs/canPlugin.md",tags:[],version:"current",frontMatter:{id:"canPlugin",title:"CAN decoder plugin",sidebar_label:"Plugin CAN decoder"},sidebar:"dltLogsSideBar",previous:{title:"Plugin SOME/IP decoder",permalink:"/dlt-logs/docs/someIpPlugin"},next:{title:"Plugin Non-verbose mode",permalink:"/dlt-logs/docs/nonVerbosePlugin"}},m={},p=[{value:"Example",id:"example",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Treeview",id:"treeview",level:2},{value:"Encoding of CAN messages in DLT log message",id:"encoding-of-can-messages-in-dlt-log-message",level:2},{value:"Limitations",id:"limitations",level:2}],f={toc:p},g="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.kt)(g,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"DLT-Logs extension version >= 1.50.0 come with a built-in CAN decoder plugin based on configurable fibex files and the possibility to open CAN file in ",(0,i.kt)("inlineCode",{parentName:"p"},".asc")," format directly."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"If a CAN ",(0,i.kt)("inlineCode",{parentName:"p"},".asc")," file is opened and the CAN plugin is configured with a FIBEX file the CAN messages will be decoded e.g. like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'CAN1 CAN TC   can      > IuK_CAN 0x510 Networkmanagement3_Status [<orig can payload>]:{"Networkmanagement3":{"NM3ControlBitVector":..., "NM3SenderECUId":...,...}}\n')),(0,i.kt)("h3",{id:"explanation"},"Explanation"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"symbol"),(0,i.kt)("th",{parentName:"tr",align:null},"description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CAN1")),(0,i.kt)("td",{parentName:"tr",align:null},"First CAN bus/channel. CAN channels/buses are mapped to ECU ids with name CANx.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CAN")),(0,i.kt)("td",{parentName:"tr",align:null},"static APID ",(0,i.kt)("inlineCode",{parentName:"td"},"CAN")," is used for CAN frames,")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TC")),(0,i.kt)("td",{parentName:"tr",align:null},"static CTID ",(0,i.kt)("inlineCode",{parentName:"td"},"TC")," is used for decoded CAN frames")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},">")),(0,i.kt)("td",{parentName:"tr",align:null},"RX/TX direction. ",(0,i.kt)("inlineCode",{parentName:"td"},">")," for a received msg (RX), ",(0,i.kt)("inlineCode",{parentName:"td"},"<")," for a transmitted frame (TX).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"IuK_CAN")),(0,i.kt)("td",{parentName:"tr",align:null},"Name of the CAN bus. Here ",(0,i.kt)("inlineCode",{parentName:"td"},"IuK_CAN"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0x510")),(0,i.kt)("td",{parentName:"tr",align:null},"CAN frame identifier")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Networkmanagement3_Status")),(0,i.kt)("td",{parentName:"tr",align:null},"Name of the frame identifier.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{...}")),(0,i.kt)("td",{parentName:"tr",align:null},"Decoded payload of the frame in JSON format")))),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"You have to configure the CAN plugin. To configure the plugin call"),(0,i.kt)(l.Z,{groupId:"operating-systems",defaultValue:"win",values:[{label:"Windows",value:"win"},{label:"macOS",value:"mac"},{label:"Linux",value:"linux"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"win",mdxType:"TabItem"},'Use F1 or Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".'),(0,i.kt)(o.Z,{value:"mac",mdxType:"TabItem"},'Use \u21e7\u2318P and enter/select command "Preferences: Open Settings (JSON)".'),(0,i.kt)(o.Z,{value:"linux",mdxType:"TabItem"},'Use Ctrl+Shift+P and enter/select command "Preferences: Open Settings (JSON)".')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'"dlt-logs.plugins": [\n        {\n            "name":"CAN",\n            "enabled": true, // you can set it to false to disable the plugin\n            "fibexDir": "/home/..." // or "c:\\\\...". Set it to the folder containing your FIBEX files.\n        },\n        {\n            "name": "FileTransfer", // config for other plugins, here file transfer plugin...\n            ...\n        },\n    ],\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"fibexDir")," needs to point to a folder containing the FIBEX files with extension .xml.\nPlease keep the files uncompressed (no .zip, no .tgz) there.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can keep multiple files in the folder. If you have multiple files providing info for the same CAN bus/channel the channels are merged by adding missing frame ids to the first fibex providing the channel. So please ensure that all frames from channels with the same short-name and with same a identifier have the same semantics/meaning!")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you changed the content of the folder for now you do need to open a new file or use ",(0,i.kt)("inlineCode",{parentName:"p"},"Developer: Reload window")," to reload the window incl. the extension host.")),(0,i.kt)("h2",{id:"treeview"},"Treeview"),(0,i.kt)("p",null,"In the tree-view you'll find more information about the loaded CAN channels and frames, PDUs, signals under"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Plugins\n|- CAN Decoder\n   |- Channels #<number of channels loaded>\n      | - <list of all loaded channels/busses\n          | - <list of all frames for that channel with short name > sorted by frame id\n            | - <list of all PDUs within that frame>\n                | - <list of all signal-instances>\n   | - Signals #<number of signals loaded>\n   | - Codings #<number of (en-)codings for datatypes loaded>\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The tooltip of each item contains more info e.g. the description (if available in the FIBEX).")),(0,i.kt)("p",null,"(todo add picture)"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"From the tree view frames you can directly apply a filter with the ",(0,i.kt)("inlineCode",{parentName:"p"},"adjust filter to hide details")," (if the frames are currently visible) or ",(0,i.kt)("inlineCode",{parentName:"p"},"adjust filter to show more details")," icon button on the right hand side of the frame item."),(0,i.kt)("p",{parentName:"admonition"},"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"open report")," icon you can directly open a graphical report showing the frame data over time!\n(todo add picture)")),(0,i.kt)("h2",{id:"encoding-of-can-messages-in-dlt-log-message"},"Encoding of CAN messages in DLT log message"),(0,i.kt)("p",null,"The decoder assumes that the message is encoded as type ",(0,i.kt)("inlineCode",{parentName:"p"},"NW_TRACE/CAN")," with the CTID ",(0,i.kt)("inlineCode",{parentName:"p"},"TC"),". The CAN message itself is encoded as two raw message payloads:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"4 bytes with the frame identifier."),(0,i.kt)("li",{parentName:"ol"},"CAN frame payload")),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Limited testing. Please raise an issue if you find unsupported CAN traces!")))}h.isMDXComponent=!0}}]);